1. What type would you choose for the following “numbers”?
  A person’s telephone number
  integer
  A person’s height
  decimal
  A person’s age
  integer
  A person’s gender (Male, Female, Prefer Not To Answer)
  char
  A person’s salary
  decimal
  A book’s ISBN
  integer
  A book’s price
  decimal
  A book’s shipping weight
  decimal
  A country’s population
  ulong
  The number of stars in the universe
  ulong
  The number of employees in each of the small or medium businesses in the
  United Kingdom (up to about 50,000 employees per business)
  int
  
2. What are the difference between value type and reference type variables? What is
boxing and unboxing?
1) value type will directly hold the value, while reference type will hold the memory address or reference for this value
2) value type are stored in stack memory, while reference types will be stored in heap memory
3) value type will not be collected by garbage collector, while reference type will be collected by garbage collector
4) value type can be created by Struct or Enum, but reference type can be created by class, interface, delegate, or array
5) value type cannot accept null values, but reference types can accept null values
boxing: convert a value type to a reference type
unboxing: convert the reference type to a value type

3. What is meant by the terms managed resource and unmanaged resource in .NET
Managed resources are those that are pure .NET code and managed by the runtime and are under its direct control.
Unmanaged resources are those that are not. File handles, pinned memory, COM objects, database connections etc.

4. Whats the purpose of Garbage Collector in .NET?
 automatic memory manager

Playing with Console App
Modify your console application to display a different message. Go ahead and
intentionally add some mistakes to your program, so you can see what kinds of error
messages you get from the compiler. The more familiar you are with these messages, and
what causes them, the better you'll be at diagnosing problems in your programs that you /
didn't/ intend to add!
Using just the ReadLine and WriteLine methods and your current knowledge of variables,
you can have the user pass in quite a few bits of information. Using this approach, create a
console application that asks the user a few questions and then generates some custom
output for them. For instance, your program could generate their "hacker name" by asking
them their favorite color, their astrology sign, and their street address number. The result
might be something like "Your hacker name is RedGemini480."
Practice number sizes and ranges
1. Create a console application project named /02UnderstandingTypes/ that outputs the
number of bytes in memory that each of the following number types uses, and the
minimum and maximum values they can have: sbyte, byte, short, ushort, int, uint, long,
ulong, float, double, and decimal.
Composite Formatting to learn how to align text in a console application

2. Write program to enter an integer number of centuries and convert it to years, days, hours,
minutes, seconds, milliseconds, microseconds, nanoseconds. Use an appropriate data
type for every data conversion. Beware of overflows!
Input: 1
Output: 1 centuries = 100 years = 36524 days = 876576 hours = 52594560 minutes
= 3155673600 seconds = 3155673600000 milliseconds = 3155673600000000
microseconds = 3155673600000000000 nanoseconds
Input: 5
Output: 5 centuries = 500 years = 182621 days = 4382904 hours = 262974240
minutes = 15778454400 seconds = 15778454400000 milliseconds = 15778454400000000
microseconds = 15778454400000000000 nanoseconds
public int centuries = 0;
public Centuries(int num)
{
    centuries = num;
}
public void Conversion()
{
    int years = centuries * 100;
    double days = years * 365.24;
    double hours = days * 24;
    double minutes = hours * 60;
    double seconds = minutes * 60;
    decimal milliseconds = (decimal)(seconds * 1000);
    decimal microseconds = milliseconds * 1000;
    decimal nanoseconds = microseconds * 1000;
    Console.WriteLine($"{centuries} centuries = {years} years = " +
        $"{days} days = {hours} hours = {minutes} minutes = {seconds} seconds" +
        $" = {milliseconds} milliseconds = {microseconds} microseconds = " +
        $"{nanoseconds} nanoseconds");
}

Test your Knowledge
1. What happens when you divide an int variable by 0?
throw a divided by 0 exception

2. What happens when you divide a double variable by 0?
throw a divided by 0 exception

3. What happens when you overflow an int variable, that is, set it to a value beyond its
range?
throw an out of range exception

4. What is the difference between x = y++; and x = ++y;?
first operation means x = y, then y = y + 1
second operation means y = y + 1, then x = y

5. What is the difference between break, continue, and return when used inside a loop
statement?
break means stop the loop
continue means ignore the left code and go on with the loop
return means stop the loop and return the value

6. What are the three parts of a for statement and which of them are required?
Usually there are initialization, condition, iteration.
It depends on which kind of statement.

7. What is the difference between the = and == operators?
"=" means set value to a variable
"==" means check whether two variable are equal.

8. Does the following statement compile? for ( ; true; ) ;
No

9. What does the underscore _ represent in a switch expression?
The underscore (_) character replaces the default keyword to signify that it should match anything if reached.

10. What interface must an object implement to be enumerated over by using the foreach
statement?
System.Collections.IEnumerable or System.Collections.Generic.IEnumerable<T>

Practice loops and operators
1. FizzBuzzis a group word game for children to teach them about division. Players take turns
to count incrementally, replacing any number divisible by three with the word /fizz/, any
number divisible by five with the word /buzz/, and any number divisible by both with /
fizzbuzz/.
Create a console application in Chapter03 named Exercise03 that outputs a simulated
FizzBuzz game counting up to 100. The output should look something like the following
screenshot:
public string FizzBuzz(int num)
{
    if (num / 3 == 0)
    {
        if (num / 5 == 0) return "fizzbuzz";
        else return "fizz";
    }   
    else if (num / 5 == 0)
    {
        return "buzz";
    }
    return "not fizz or buzz";
}

What will happen if this code executes?
int max = 500;
for (byte i = 0; i < max; i++)
{
WriteLine(i);
}
Create a console application and enter the preceding code. Run the console application
and view the output. What happens?
The loop is infinite. 

What code could you add (don’t change any of the preceding code) to warn us about the
problem?
add a checked block

2. Print-a-Pyramid.Like the star pattern examples that we saw earlier, create a program that
will print the following pattern: If you find yourself getting stuck, try recreating the two
examples that we just talked about in this chapter first. They’re simpler, and you can
compare your results with the code included above.
This can actually be a pretty challenging problem, so here is a hint to get you going. I used
three total loops. One big one contains two smaller loops. The bigger loop goes from line
to line. The first of the two inner loops prints the correct number of spaces, while the
second inner loop prints out the correct number of stars.
*
***
*****
*******
*********
public class PrintPyramid
{
    public void Pyramid(int n)
    {
        for (int i = 0; i < n; i++)
        {
            string blank = new string(' ', n - 1 - i);
            string stars = new string('*', 1 + i * 2);
            Console.WriteLine(blank + stars + blank);
        }
    }
}

3. Write a program that generates a random number between 1 and 3 and asks the user to
guess what the number is. Tell the user if they guess low, high, or get the correct answer.
Also, tell the user if their answer is outside of the range of numbers that are valid guesses
(less than 1 or more than 3). You can convert the user's typed answer from a string to an
int using this code:
int guessedNumber = int.Parse(Console.ReadLine());
Note that the above code will crash the program if the user doesn't type an integer value.
For this exercise, assume the user will only enter valid guesses.
int correctNumber = new Random().Next(3) + 1;
Console.WriteLine("Guess a number: ");
int guessedNumber = int.Parse(Console.ReadLine());

if (correctNumber == guessedNumber)
{
    Console.WriteLine("You get the correct answer.");
}else if (guessedNumber > correctNumber && guessedNumber <= 3)
{
    Console.WriteLine("higher than the correct number.");
}else if (guessedNumber < correctNumber && guessedNumber >= 1)
{
    Console.WriteLine("lower than the correct number.");
}
else
{
    Console.WriteLine("out of range.");
}

4. Write a simple program that defines a variable representing a birth date and calculates
how many days old the person with that birth date is currently.
For extra credit, output the date of their next 10,000 day (about 27 years) anniversary.
Note: once you figure out their age in days, you can calculate the days until the next
anniversary using int daysToNextAnniversary = 10000 - (days % 10000); .
public class CalDays
{
    public int Days(DateTime date)
    {
        return (DateTime.Today - date).Days;
    }

    public DateTime nextAnniversary(DateTime date)
    {
        int days = Days(date);
        DateTime anniversaryDate = date.AddDays(10000 - (days % 10000));
        return anniversaryDate;
    }
}

5. Write a program that greets the user using the appropriate greeting for the time of day.
Use only if , not else or switch , statements to do so. Be sure to include the following
greetings:
"Good Morning"
"Good Afternoon"
"Good Evening"
"Good Night"
It's up to you which times should serve as the starting and ending ranges for each of the
greetings. If you need a refresher on how to get the current time, see DateTime
Formatting. When testing your program, you'll probably want to use a DateTime variable
you define, rather than the current time. Once you're confident the program works
correctly, you can substitute DateTime.Now for your variable (or keep your variable and just
assign DateTime.Now as its value, which is often a better approach).
public void Greet(DateTime time)
{
    TimeSpan morning = TimeSpan.Parse("09:00");
    TimeSpan afternoon = TimeSpan.Parse("12:00");
    TimeSpan evening = TimeSpan.Parse("18:00");
    TimeSpan night = TimeSpan.Parse("22:00");

    if (time.TimeOfDay >= morning && time.TimeOfDay < afternoon)
    {
        Console.WriteLine("Good Morning!");
        return;
    }
    if (time.TimeOfDay >= afternoon && time.TimeOfDay < evening)
    {
        Console.WriteLine("Good Afternoon!");
        return;
    }
    if (time.TimeOfDay >= evening && time.TimeOfDay < night)
    {
        Console.WriteLine("Good Evening!");
        return;
    }
    if (time.TimeOfDay >= evening || time.TimeOfDay < morning)
    {
        Console.WriteLine("Good Morning!");
        return;
    }
}

6. Write a program that prints the result of counting up to 24 using four different increments.
First, count by 1s, then by 2s, by 3s, and finally by 4s.
Use nested for loops with your outer loop counting from 1 to 4. You inner loop should
count from 0 to 24, but increase the value of its /loop control variable/ by the value of the /
loop control variable/ from the outer loop. This means the incrementing in the /
afterthought/ expression will be based on a variable.
Your output should look something like this:
0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24
0,2,4,6,8,10,12,14,16,18,20,22,24
0,3,6,9,12,15,18,21,24
0,4,8,12,16,20,24
public class Counting
{
    public void PrintCounting()
    {
        for (int i = 1; i < 5; i++)
        {
            List<int> nums = new List<int>();
            for (int j = 0; j < 25; j += i)
            {
                nums.Add(j);
            }
            Console.WriteLine(string.Join(' ', nums));
        }
    }
}

