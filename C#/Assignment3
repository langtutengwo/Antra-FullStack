03 Object-Oriented Programming
Test your knowledge
1. What are the six combinations of access modifier keywords and what do they do? 
Public. Objects that implement public access modifiers are accessible from everywhere in a project without any restrictions.
Private. Objects that implement private access modifier are accessible only inside a class or a structure.
Protected. The protected keyword implies that the object is accessible inside the class and in all classes that derive from that class.
Internal. For Internal keyword, the access is limited exclusively to classes defined within the current project assembly.
Protected Internal. we can access the protected internal member only in the same assembly or in a derived class in other assemblies.
Private Protected. We can access members inside the containing class or in a class that derives from a containing class, but only in the same assembly(project).

2.
What is the difference between the static, const, and readonly keywords when applied to
a type member?
Constant and ReadOnly keyword is used to make a field constant which value cannot be modified. 
The static keyword is used to make members static that can be shared by all the class objects.

3. What does a constructor do?
In c#, Constructor is a method that will invoke automatically whenever an instance of class or struct is created

4. Why is the partial keyword useful?
The partial keyword indicates that other parts of the class, struct, or interface can be defined in the namespace.

5. What is a tuple?
the tuples feature provides concise syntax to group multiple data elements in a lightweight data structure.

6. What does the C# record keyword do?
a new reference type that you can create instead of classes or structs

7. What does overloading and overriding mean?
Overriding: Methods in base class and its subclasses share the same method name and same input parameters
Overloading: Methods in same class share the same method name, but different input parameters

8. What is the difference between a field and a property?
A field is a variable of any type that is declared directly in a class. 
A property is a member that provides a flexible mechanism to read, write or compute the value of a private field.

9. How do you make a method parameter optional?
set default value
use optional attribute
overload the method

10. What is an interface and how is it different from abstract class?
 An abstract class allows you to create functionality that subclasses can implement or override. 
 An interface only allows you to define functionality, not implement it. 
 And whereas a class can extend only one abstract class, it can take advantage of multiple interfaces.

11. What accessibility level are members of an interface?
public

12. True/False. Polymorphism allows derived classes to provide different implementations
of the same method.
True

13. True/False. The override keyword is used to indicate that a method in a derived class is
providing its own implementation of a method.
False

14. True/False. The new keyword is used to indicate that a method in a derived class is
providing its own implementation of a method.
False

15. True/False. Abstract methods can be used in a normal (non-abstract) class. 
False

16.True/False. Normal (non-abstract) methods can be used in an abstract class. 
17. True/False. Derived classes can override methods that were virtual in the base class. 
True

18. True/False. Derived classes can override methods that were abstract in the base class.
True

19. True/False. In a derived class, you can override a method that was neither virtual non abstract in the
base class.
False

20. True/False. A class that implements an interface does not have to provide an
implementation for all of the members of the interface.
False

21. True/False. A class that implements an interface is allowed to have other members that
aren’t defined in the interface.
True

22. True/False. A class can have more than one base class.
False

23. True/False. A class can implement more than one interface.
True

Working with methods
1. Let’s make a program that uses methods to accomplish a task. Let’s take an array and
reverse the contents of it. For example, if you have 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, it would
become 10, 9, 8, 7, 6, 5, 4, 3, 2, 1.
To accomplish this, you’ll create three methods: one to create the array, one to reverse the
array, and one to print the array at the end.
Your Mainmethod will look something like this:
static void Main(string[] args) {
int[] numbers = GenerateNumbers();
Reverse(numbers);
PrintNumbers(numbers);
}
The GenerateNumbersmethod should return an array of 10 numbers. (For bonus points,
change the method to allow the desired length to be passed in, instead of just always
being 10.)
The PrintNumbersmethod should use a foror foreachloop to print out each item in the
array. The Reversemethod will be the hardest. Give it a try and see what you can make
happen. If you get
stuck, here’s a couple of hints:
Hint #1:To swap two values, you will need to place the value of one variable in a temporary
location to make the swap:
// Swapping a and b.
int a = 3;
int b = 5;
int temp = a;
a = b;
b = temp;
Hint #2:Getting the right indices to swap can be a challenge. Use a forloop, starting at 0
and going up to the length of the array / 2. The number you use in the forloop will be the
index of the first number to swap, and the other one will be the length of the array minus
the index minus 1. This is to account for the fact that the array is 0-based. So basically,
you’ll be swapping array[index]with array[arrayLength – index – 1].
public int[] GenerateNums(int length)
{
    int[] arr = new int[length];
    for (int i = 0; i < length; i++)
    {
        arr[i] = i;
    }
    return arr;
}

public void ReverseNums(int[] nums)
{
    for (int i = 0; i < nums.Length / 2; i++)
    {
        int temp = nums[i];
        nums[i] = nums[nums.Length - 1 - i];
        nums[nums.Length - 1 - i] = temp;
    }
}

public void PrintNums(int[] nums)
{
    Console.WriteLine(string.Join(' ', nums));
}

public void Run(int length)
{
    int[] numbers = GenerateNums(length);
    ReverseNums(numbers);
    PrintNums(numbers);
}

2. The Fibonacci sequence is a sequence of numbers where the first two numbers are 1 and 1,
and every other number in the sequence after it is the sum of the two numbers before it. So
the third number is 1 + 1, which is 2. The fourth number is the 2nd number plus the 3rd,
which is 1 + 2. So the fourth number is 3. The 5th number is the 3rd number plus the 4th
number: 2 + 3 = 5. This keeps going forever.
The first few numbers of the Fibonacci sequence are: 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, ...
Because one number is defined by the numbers before it, this sets up a perfect
opportunity for using recursion.
Your mission, should you choose to accept it, is to create a method called Fibonacci, which
takes in a number and returns that number of the Fibonacci sequence. So if someone calls
Fibonacci(3), it would return the 3rd number in the Fibonacci sequence, which is 2. If
someone calls Fibonacci(8), it would return 21.
In your Mainmethod, write code to loop through the first 10 numbers of the Fibonacci
sequence and print them out.
Hint #1:Start with your base case. We know that if it is the 1st or 2nd number, the value will
be 1.
Hint #2:For every other item, how is it defined in terms of the numbers before it? Can you
come up with an equation or formula that calls the Fibonaccimethod again?
public int GenerateFib(int n)
{
    int fib = 0;
    if (n == 1 || n == 2) return fib = 1;
    return GenerateFib(n - 1) + GenerateFib(n -2);
}

Designing and Building Classes using object-oriented principles
1. Write a program that that demonstrates use of four basic principles of
object-oriented programming /Abstraction/, /Encapsulation/, /Inheritance/ and
/Polymorphism/.
public class OOP
{
    // Encapsulation
    private string encapsulation = null;
}

// Abstraction
public abstract class Abstract
{
    public abstract void AbstractMethod();
    public void OverloadMethod()
    {
        Console.WriteLine("Hello Abstract class.");
    }
    // Polymorphism overloading
    public void OverloadMethod(string str)
    {
        Console.WriteLine("Hello str class.");
    }
}

// Inheritance
public class Children : Abstract
{
    // Polymorphism overriding
    public override void AbstractMethod()
    {
        Console.WriteLine("This is Inheritance.");
    }

}

2. Use /Abstraction/ to define different classes for each person type such as Student
and Instructor. These classes should have behavior for that type of person.
public class Person
{
    public int Id { get; set; }
    public string Name { get; set; }

}

public class Student : Person { }

public class Instuctor : Person { }

3. Use /Encapsulation/ to keep many details private in each class.
public class Person
{
    public int Id { get; set; }
    public string Name { get; set; }

    private string address = "secret";

}

public class Student : Person
{
    private string address = "secret";
}

public class Instuctor : Person
{
    private string address = "secret";
}

4. Use /Inheritance/ by leveraging the implementation already created in the Person
class to save code in Student and Instructor classes.
public class Person
{
    public int id { get; set; }
    public string name { get; set; }

    private string address = "secret";

    public void PrintId()
    {
        Console.WriteLine("Id is: ", id);
    }
}

5. Use /Polymorphism/ to create virtual methods that derived classes could override to
create specific behavior such as salary calculations.
public class Person
{
    public int id { get; set; }
    public string name { get; set; }
    private int salary { get; set; }

    private string address = "secret";

    public void PrintId()
    {
        Console.WriteLine("Id is: ", id);
    }

    public virtual void Salary()
    {
        Console.WriteLine("The salary is: ", salary);
    }
}

public class Student : Person
{
    private string address = "secret";
    private int salary { get; set; }

    public override void Salary()
    {
        Console.WriteLine("The salary is: ", salary * 10);
    }
}

public class Instuctor : Person
{
    private string address = "secret";
    private int salary { get; set; }

    public override void Salary()
    {
        Console.WriteLine("The salary is: ", salary * 100);
    }
}

6. Make sure to create appropriate /interfaces/ such as ICourseService, IStudentService,
IInstructorService, IDepartmentService, IPersonService, IPersonService (should have
person specific methods). IStudentService, IInstructorService should inherit from
IPersonService.
Person
Calculate Age of the Person
Calculate the Salary of the person, Use decimal for salary
Salary cannot be negative number
Can have multiple Addresses, should have method to get addresses
Instructor
Belongs to one Department and he can be Head of the Department
Instructor will have added bonus salary based on his experience, calculate his
years of experience based on Join Date
Student
Can take multiple courses
Calculate student GPA based on grades for courses
Each course will have grade from A to F
Course
Will have list of enrolled students
Department
Will have one Instructor as head
Will have Budget for school year (start and end Date Time)
Will offer list of courses
public interface IPersonService
{
    public int CalculateAge();
    public decimal CalculateSalary();
    public string GetAddress();
}

public interface ICourseService
{
    public string[] ListOfEnrolledStudent();
}

public interface IStudentService : IPersonService
{
    public string[] GetAllCourses();
    public decimal[] GetGPAs();
    public char[] GetGrades();
}

public interface IInstructorService : IPersonService
{
    public string GetDepartment();
    public int GetYOE(DateTime joinDate);
}

public interface IDepartmentService
{
    public string GetHeadOfDepartment();
    public decimal GetBudget(DateTime startTime, DateTime endTime);
    public string[] ListOfCourses();
}

7. Try creating the two classes below, and make a simple program to work with them, as
described below
Create a Color class:
On a computer, colors are typically represented with a red, green, blue, and alpha
(transparency) value, usually in the range of 0 to 255. Add these as instance variables.
A constructor that takes a red, green, blue, and alpha value.
A constructor that takes just red, green, and blue, while alpha defaults to 255
(opaque).
Methods to get and set the red, green, blue, and alpha values from a Colorinstance.
A method to get the grayscale value for the color, which is the average of the red,
green and blue values.
Create a Ball class:
The Ball class should have instance variables for size and color (the Color class you just
created). Let’s also add an instance variable that keeps track of the number of times it
has been thrown.
Create any constructors you feel would be useful.
Create a Pop method, which changes the ball’s size to 0.
Create a Throw method that adds 1 to the throw count, but only if the ball hasn’t been
popped (has a size of 0).
A method that returns the number of times the ball has been thrown.
Write some code in your Main method to create a few balls, throw them around a few
times, pop a few, and try to throw them again, and print out the number of times that the
balls have been thrown. (Popped balls shouldn’t have changed.)
public class Color
{
    decimal redVaule = 0;
    decimal greenVaule = 0;
    decimal blueVaule = 0;
    decimal alphaValue = 0;
    public Color(decimal red, decimal green, decimal blue, decimal alpha)
    {
        redVaule = red;
        greenVaule = green;
        blueVaule = blue;
        alphaValue = alpha;
    }

    public Color(decimal red, decimal green, decimal blue, decimal alpha = 255)
    {
        redVaule = red;
        greenVaule = green;
        blueVaule = blue;
        alphaValue = alpha;
    }

    public void GetValues(Color colorInstance)
    {
        redVaule = colorInstance.redVaule;
        greenVaule = colorInstance.greenVaule;
        blueVaule = colorInstance.blueVaule;
        alphaValue = colorInstance.alphaValue;
    }

    public decimal GetGrayscale()
    {
        return (redVaule + greenVaule + blueVaule) / 3;
    }
 }
 
 public class Ball
{
    decimal size = 1;
    Color color = new Color(0, 0, 0);
    int thrownCount = 0;

    public void Pop()
    {
        size = 0;
    }

    public void Throw()
    {
        if (size != 0)
        {
            thrownCount ++;
        }
    }

    public int TimesOfThrown()
    {
        return thrownCount;
    }
}
 
 static void Run()
{
    Ball a = new Ball();
    Ball b = new Ball();
    Ball c = new Ball();

    for (int i = 0; i < 10; i++)
    {
        a.Throw();
        b.Throw();
        c.Throw();
    }

    a.Pop();
    b.Pop();

    for (int i = 0; i < 5; i++)
    {
        a.Throw();
        b.Throw();
        c.Throw();
    }

    Console.WriteLine(a.TimesOfThrown());
    Console.WriteLine(b.TimesOfThrown());
    Console.WriteLine(c.TimesOfThrown());
}
